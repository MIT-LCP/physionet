# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10"]
        include:
          - python-version: "3.10"
            coverage: 1
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest pyright
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --statistics
    # - name: Type check with pyright
    #   run: |
    #     pyright physionet
    # - name: Test with pytest
    #   run: |
    #     pytest -vv --cov-report term-missing --cov physionet | tee coverage-report-${{ matrix.python-version }}.txt
    # - name: Upload pytest test results
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: coverage-report
    #     path: coverage-report-${{ matrix.python-version }}.txt
    #   # Use always() to always run this step to publish test results when there are test failures
    #   if: ${{ always() }}
    # - name: Generate coverage badge
    #   if: ${{ matrix.coverage }}
    #   run: |
    #     value=$(awk '$1 == "TOTAL" {print $NF+0}' coverage-report-${{ matrix.python-version }}.txt)
    #     anybadge --value=$value --file coverage.svg coverage
